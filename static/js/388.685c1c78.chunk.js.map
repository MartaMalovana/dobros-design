{"version":3,"file":"static/js/388.685c1c78.chunk.js","mappings":"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","sources":["pages/Saved.jsx","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { useSelector, useDispatch} from \"react-redux\";\r\nimport { useInView } from 'react-intersection-observer';\r\nimport { Wrapper } from \"../App.styled\";\r\nimport Header from '../components/header/Header';\r\nimport Footer from '../components/footer/Footer';\r\nimport { Content } from \"../App.styled\";\r\nimport { CardContainer, Container} from \"../components/showProduct/ShowProduct.styled\";\r\nimport ProductCard from '../components/productCard/ProductCard';\r\nimport {saved} from '../redux/saved/saved.selectors';\r\nimport MySlider from \"../components/slider/MySlider\";\r\nimport { slider } from \"../redux/slider/slider-selectors\";\r\nimport sliderActions from \"../redux/slider/slider-actions\";\r\nimport { Up, Arrow } from \"../components/showProduct/ShowProduct.styled\";\r\n\r\nexport default function Saved () {  \r\n    const savedData = useSelector(saved);\r\n    const showSlider = useSelector(slider);\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState(savedData);\r\n    const [slide, setSlide] = useState(0);\r\n    \r\n    const { ref, inView, entry } = useInView({\r\n        root: null,\r\n        rootMargin: '0px',\r\n        threshold: 0\r\n    });\r\n\r\n    const closeSlider = () => {\r\n        dispatch(sliderActions.sliderToggle());\r\n      };\r\n\r\n    const changeElement = (newData) => {\r\n        console.log(newData);\r\n        setData(newData);\r\n    };\r\n\r\n    const getSlide = (index) => {\r\n        setSlide(index);\r\n      };\r\n    \r\n      const toTop = () => {\r\n        window.scrollTo({top: 0, left: 0, \"behavior\": \"smooth\"});\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <div ref={ref}><Header /></div>\r\n            <Container>\r\n            <Content empty>\r\n                <CardContainer >\r\n                    {data && data.map((el, index) => \r\n                        <ProductCard key={el.id} data={el} title slide={getSlide} index={index}/>)}\r\n            </CardContainer>\r\n            {showSlider && (\r\n                <MySlider\r\n                    data={data}\r\n                    slider={closeSlider}\r\n                    slide={slide}\r\n                    changeElement={changeElement}\r\n                />\r\n             )}\r\n            </Content>\r\n            </Container>\r\n            {!inView && <Up onClick={toTop}><Arrow /></Up>}\r\n            <Footer />\r\n        </Wrapper>\r\n    );\r\n}","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n\n  React.useEffect(() => {\n    if (!ref && entryTarget && !triggerOnce && !skip) {\n      // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n        entry: undefined,\n      });\n    }\n  }, [ref, entryTarget, triggerOnce, skip, initialInView]);\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["Saved","savedData","useSelector","saved","showSlider","slider","dispatch","useDispatch","useState","data","setData","slide","setSlide","useInView","root","rootMargin","threshold","ref","inView","getSlide","entry","index","empty","map","el","title","id","sliderActions","changeElement","newData","console","log","Up","onClick","window","scrollTo","top","left","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","optionsToId","options","Object","keys","sort","filter","key","has","set","toString","get","createObserver","instance","thresholds","elements","observer","IntersectionObserver","entries","forEach","isIntersecting","some","intersectionRatio","trackVisibility","isVisible","target","callback","Array","isArray","observe","element","fallbackInView","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","callbacks","push","splice","indexOf","length","delete","unobserve","size","disconnect","isPlainChildren","props","children","React","delay","triggerOnce","skip","initialInView","onChange","setRef","state","setState","current","entryTarget","_state$entry","result"],"sourceRoot":""}